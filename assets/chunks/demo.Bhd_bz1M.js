var T=Object.defineProperty;var D=(n,o,r)=>o in n?T(n,o,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[o]=r;var b=(n,o,r)=>D(n,typeof o!="symbol"?o+"":o,r);import{_ as C,d as F}from"./cesium-view.vue_vue_type_script_setup_true_lang.DB8O3Ft0.js";import*as t from"/GJ/cesiumStatic/index.js";import{d as G,v as P,at as B,o as S,b as I}from"./framework.BSn6qPJ2.js";import"./theme.Bcjxkfh6.js";const k=G({__name:"demo",setup(n){const o=t.buildModuleUrl("Assets/Textures/moonSmall.jpg");class r{constructor(i){b(this,"primitive");this.viewer=i;const y=1e5,d=t.Cartesian3.fromDegrees(116.39,39.9,.5*y),g=t.Transforms.eastNorthUpToFixedFrame(d),e=[[.5,-.5,.5],[-.5,-.5,.5],[-.5,-.5,-.5],[.5,-.5,-.5],[.5,.5,-.5],[.5,.5,.5],[-.5,.5,.5],[-.5,.5,-.5]],v=[...e[2],...e[3],...e[4],...e[7],...e[2],...e[3],...e[0],...e[1],...e[4],...e[7],...e[6],...e[5],...e[7],...e[2],...e[1],...e[6],...e[3],...e[4],...e[5],...e[0],...e[1],...e[0],...e[5],...e[6]].map(_=>_*y),A=new Float32Array(v),a=[1,0,0],m=[-1,0,0],c=[0,1,0],p=[0,-1,0],u=[0,0,1],l=[0,0,-1],f=new Float32Array([...l,...l,...l,...l,...p,...p,...p,...p,...c,...c,...c,...c,...m,...m,...m,...m,...a,...a,...a,...a,...u,...u,...u,...u]),h=new Float32Array([0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1]),x=new Uint16Array([0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23]),w=new t.Primitive({geometryInstances:new t.GeometryInstance({geometry:new t.Geometry({attributes:{position:new t.GeometryAttribute({componentDatatype:t.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:A}),normal:new t.GeometryAttribute({componentDatatype:t.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:f}),st:new t.GeometryAttribute({componentDatatype:t.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:h}),bitangent:void 0,color:void 0,tangent:void 0},indices:x,primitiveType:t.PrimitiveType.TRIANGLES,boundingSphere:t.BoundingSphere.fromVertices(v)})}),appearance:new t.MaterialAppearance({material:t.Material.fromType("Image",{image:o}),closed:!0}),modelMatrix:g,asynchronous:!1});this.primitive=w,this.viewer.scene.primitives.add(w),this.viewer.camera.flyToBoundingSphere(new t.BoundingSphere(d,y))}}return P(()=>{const s=B(F);if(s){const i=new r(s);console.log("cubePrimitive",i)}}),(s,i)=>(S(),I(C))}});export{k as default};
