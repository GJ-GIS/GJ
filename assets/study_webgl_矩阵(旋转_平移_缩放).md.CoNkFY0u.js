import{_ as a,c as d,ae as e,o as r}from"./chunks/framework.BSn6qPJ2.js";const c=JSON.parse('{"title":"矩阵平移,缩放,旋转","description":"","frontmatter":{},"headers":[],"relativePath":"study/webgl/矩阵(旋转,平移,缩放).md","filePath":"study/webgl/矩阵(旋转,平移,缩放).md","lastUpdated":1731858933000}'),h={name:"study/webgl/矩阵(旋转,平移,缩放).md"};function l(o,t,i,s,n,b){return r(),d("div",null,t[0]||(t[0]=[e('<h1 id="矩阵平移-缩放-旋转" tabindex="-1">矩阵平移,缩放,旋转 <a class="header-anchor" href="#矩阵平移-缩放-旋转" aria-label="Permalink to &quot;矩阵平移,缩放,旋转&quot;">​</a></h1><p>使用矩阵进行平移,缩放,旋转等操作有如下的好处:</p><ol><li>便捷的组合变换.通过将多个变换矩阵相乘，可以轻松地组合多个变换，例如先平移再旋转，或者先缩放再平移，从而实现复杂的变换效果。</li><li>方便逆变换.矩阵表示的变换可以轻松地求逆，从而实现逆变换。如果我们有一个变换矩阵 M 来描述从一个坐标系到另一个坐标系的变换，我们可以很容易地找到它的逆变换M^-1，从而实现从目标坐标系到原始坐标系的变换。假设我们有一个平移矩阵 T，用于将一个点 P 从原始坐标系平移一定距离，变换后的点为P′。那么如果我们需要将P′还原到原始坐标系中，我们只需要对P′应用平移矩阵T的逆变换T^−1即可</li><li>性能卓越.相比于传统一个个计算变换, 矩阵可以使用矩阵乘法的并行运算,减少运算量,提高性能.</li><li>可扩展性.通过扩展矩阵表示的变换，可以轻松地引入新的变换操作，例如剪切、投影等，从而满足不同应用的需求。</li><li>简洁清晰.使用矩阵可以将平移、缩放和旋转等变换统一表示为一个矩阵形式，使得代码更加简洁清晰，易于理解和维护。</li></ol><h2 id="一-二维矩阵的变换" tabindex="-1">一. 二维矩阵的变换 <a class="header-anchor" href="#一-二维矩阵的变换" aria-label="Permalink to &quot;一. 二维矩阵的变换&quot;">​</a></h2><p>二维单位矩阵: 矩阵的第一列代表 x , 矩阵的第二列代表 y , 第三列代表额外加的数(tx, ty)</p><table tabindex="0"><thead><tr><th>1</th><th>0</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td></tr></tbody></table><h3 id="_1-矩阵的平移" tabindex="-1">1. 矩阵的平移 <a class="header-anchor" href="#_1-矩阵的平移" aria-label="Permalink to &quot;1. 矩阵的平移&quot;">​</a></h3><p>x&#39; = x + tx</p><p>y&#39; = y + ty</p><p>二维平移矩阵:</p><table tabindex="0"><thead><tr><th>1</th><th>0</th><th>tx</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>ty</td></tr><tr><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>tx, ty, 分别为在x, y方向上的平移量.</p><h3 id="_2-矩阵的缩放" tabindex="-1">2. 矩阵的缩放 <a class="header-anchor" href="#_2-矩阵的缩放" aria-label="Permalink to &quot;2. 矩阵的缩放&quot;">​</a></h3><p>二维缩放矩阵:</p><table tabindex="0"><thead><tr><th>sx</th><th>0</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>sy</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>sx, sy, 分别为x, y方向上的缩放因子.</p><h3 id="_3-矩阵的旋转" tabindex="-1">3. 矩阵的旋转 <a class="header-anchor" href="#_3-矩阵的旋转" aria-label="Permalink to &quot;3. 矩阵的旋转&quot;">​</a></h3><p>x&#39; = x _ cosB - y _ sinB</p><p>y&#39; = x _ sinB + y _ cosB</p><p>二维旋转矩阵(等同于在三维坐标系中绕 z 轴旋转):</p><table tabindex="0"><thead><tr><th>cosB</th><th>-sinB</th><th>0</th></tr></thead><tbody><tr><td>sinB</td><td>cosB</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>旋转 B 角度; 等同于三维绕Z轴旋转 B 角度</p><h2 id="二-简单三维矩阵的变换" tabindex="-1">二. 简单三维矩阵的变换 <a class="header-anchor" href="#二-简单三维矩阵的变换" aria-label="Permalink to &quot;二. 简单三维矩阵的变换&quot;">​</a></h2><h2 id="三-通用三维矩阵的变换" tabindex="-1">三. 通用三维矩阵的变换 <a class="header-anchor" href="#三-通用三维矩阵的变换" aria-label="Permalink to &quot;三. 通用三维矩阵的变换&quot;">​</a></h2>',24)]))}const _=a(h,[["render",l]]);export{c as __pageData,_ as default};
